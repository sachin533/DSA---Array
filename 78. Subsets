import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>()); // Add the empty subset
        
        for (int num : nums) {
            int size = result.size();
            // Iterate through the current result and add the new number to each existing subset
            for (int i = 0; i < size; i++) {
                List<Integer> subset = new ArrayList<>(result.get(i));
                subset.add(num);
                result.add(subset);
            }
        }
        
        return result;
    }
}

Time Complexity: 
𝑂(𝑛⋅2𝑛)O(n⋅2n)
Space Complexity: 
𝑂(𝑛⋅2𝑛)O(n⋅2n)



//backtraking

public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, 0);
    return list;
}

private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
}

Time Complexity: O(2^n \cdot n)
Space Complexity: O(2^n \cdot n)
